def find_missing_and_repeating(arr):
    n = len(arr)
    seen = set()
    repeating = -1
    
    # Step 1: find repeating element
    for x in arr:
        if x in seen:
            repeating = x
        else:
            seen.add(x)

    # Step 2: find missing element
    missing = -1
    for i in range(1, n+1):
        if i not in seen:
            missing = i
            break

    return missing, repeating

# Example
print(find_missing_and_repeating([1, 2, 2, 4, 5]))
# Output: (3, 2)



✅ Step-by-Step Explanation
Step 1: Find Repeating

We use a set (to track unique numbers).

Traverse the array:

If the number is already in the set, then it’s the repeating element.

Otherwise, add it to the set.

👉 In our example:

arr = [1, 2, 2, 4, 5]

seen = {}
Traverse:
- 1 → not seen → add {1}
- 2 → not seen → add {1,2}
- 2 → already seen → repeating = 2
- 4 → add {1,2,4}
- 5 → add {1,2,4,5}


✅ Found repeating = 2

Step 2: Find Missing

After step 1, the set should contain all numbers except the missing one.

Loop through 1...n.

If a number is not in set, that’s the missing element.

👉 Here, n = 5.
Check: 1 ✅, 2 ✅, 3 ❌, 4 ✅, 5 ✅
Missing = 3

✅ Final Answer
Missing = 3, Repeating = 2

✅ Complexity

Time: O(n) (one pass to find repeating, one pass to find missing)

Space: O(n) because we use a set.
